http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcacheClientFactory \n Simple interface used to abstract the creation of the MemcachedClient\n All implementers must have a constructor that takes an instance of\n {@link com.googlecode.hibernate.memcached.PropertiesHelper}.\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.Md5KeyStrategy \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.dangamemcached.SimpleErrorHandler \n DOCUMENT ME!\n\n @author George Wei\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.Memcache \n Interface to abstract memcache operations.\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.HashCodeKeyStrategy \n Transforms the key object using key.hashCode()\n\n @deprecated as of 1.3 HashCodeKeyStrategy is deprecated and Sha1KeyStrategy is the default. Use that instead.\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.dangamemcached.DangaMemcacheClientFactory \n DOCUMENT ME!\n\n @author George Wei\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcachedCacheProvider \n Configures an instance of {@link MemcachedCache} for use as a second-level cache in Hibernate.\n To use set the hibernate property <i>hibernate.cache.provider_class<\/i> to the name of this class.\n <p/>\n There are two types of property settings that the MemcachedCacheProvider supports, cache-wide properties\n and region-name properties.\n <p/>\n <b>Cache wide properties<\/b>\n <table border='1'>\n <tr><th>Property<\/th><th>Default<\/th><th>Description<\/th><\/tr>\n <tr><td>hibernate.memcached.servers<\/td><td>localhost:11211<\/td>\n <td>Space delimited list of memcached instances in host:port format<\/td><\/tr>\n <tr><td>hibernate.memcached.cacheTimeSeconds<\/td><td>300<\/td>\n <td>The default number of seconds items should be cached. Can be overriden at the regon level.<\/td><\/tr>\n <tr><td>hibernate.memcached.keyStrategy<\/td><td>{@link Sha1KeyStrategy}<\/td>\n <td>Sets the strategy class to to use for generating cache keys.\n Must provide a class name that implements {@link com.googlecode.hibernate.memcached.KeyStrategy}<\/td><\/tr>\n <tr><td>hibernate.memcached.readBufferSize<\/td>\n <td>{@link net.spy.memcached.DefaultConnectionFactory#DEFAULT_READ_BUFFER_SIZE}<\/td>\n <td>The read buffer size for each server connection from this factory<\/td><\/tr>\n <tr><td>hibernate.memcached.operationQueueLength<\/td>\n <td>{@link net.spy.memcached.DefaultConnectionFactory#DEFAULT_OP_QUEUE_LEN}<\/td>\n <td>Maximum length of the operation queue returned by this connection factory<\/td><\/tr>\n <tr><td>hibernate.memcached.operationTimeout<\/td>\n <td>{@link net.spy.memcached.DefaultConnectionFactory#DEFAULT_OPERATION_TIMEOUT}<\/td>\n <td>Default operation timeout in milliseconds<\/td><\/tr>\n <tr><td>hibernate.memcached.hashAlgorithm<\/td><td>{@link net.spy.memcached.HashAlgorithm#KETAMA_HASH}<\/td>\n <td>Which hash algorithm to use when adding items to the cache.<br/>\n <b>Note:<\/b> the MemcachedClient defaults to using\n {@link net.spy.memcached.HashAlgorithm#NATIVE_HASH}, while the hibernate-memcached cache defaults to KETAMA_HASH\n for \"consistent hashing\"<\/td><\/tr>\n <tr><td>hibernate.memcached.clearSupported<\/td><td>false<\/td>\n <td>Enables support for the {@link MemcachedCache#clear()} method for all cache regions.\n The way clear is implemented for memcached is expensive and adds overhead to all get/set operations.\n It is not recommended for production use.<\/td><\/tr>\n <\/table>\n <p/>\n <b>Cache Region properties<\/b><br/>\n Cache regon properties are set by giving your cached data a \"region name\" in hibernate.\n You can tune the MemcachedCache instance for your region using the following properties.\n These properties essentially override the cache-wide properties above.<br/>\n <table border='1'>\n <tr><th>Property<\/th><th>Default<\/th><th>Description<\/th><\/tr>\n <tr><td>hibernate.memcached.[region-name].cacheTimeSeconds<\/td>\n <td>none, see hibernate.memcached.cacheTimeSeconds<\/td>\n <td>Set the cache time for this cache region, overriding the cache-wide setting.<\/td><\/tr>\n <tr><td>hibernate.memcached.[region-name].keyStrategy<\/td><td>none, see hibernate.memcached.keyStrategy<\/td>\n <td>Overrides the strategy class to to use for generating cache keys in this cache region.\n Must provide a class name that implements {@link com.googlecode.hibernate.memcached.KeyStrategy}<\/td><\/tr>\n <tr><td>hibernate.memcached.[region-name].clearSupported<\/td>\n <td>none, see hibernate.memcached.clearSupported<\/td>\n <td>Enables clear() operations for this cache region only.\n Again, the clear operation incurs cost on every get/set operation.<\/td>\n <\/tr>\n <\/table>\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.dangamemcached.DangaMemcache \n DOCUMENT ME!\n\n @author George Wei\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcacheExceptionHandler \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.Config \n DOCUMENT ME!\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcachedCache \n Wrapper around MemcachedClient instance to provide the bridge between Hiberante and Memcached.\n Uses the regionName given by Hibernate via the {@link com.googlecode.hibernate.memcached.MemcachedCacheProvider}\n when generating cache keys.\n All cache operations rely on using a {@link com.googlecode.hibernate.memcached.KeyStrategy}\n to generate cache keys for use in memcached.\n <p/>\n Support for the {@link #clear()} operation is disabled by default.<br/>\n There is no way for this instance of MemcachedCache to know what cache values to \"clear\" in a given Memcached instance.\n Clear functionality is implemented by incrementing a \"clearIndex\" value that is always included in the cache-key generation.\n When clear is called the memcached increment function is used to increment the global clean index. When clear is enabled,\n every cache action taken starts with a call to memcached to 'get' the clearIndex counter. That value is then\n applied to the cache key for the cache operation being taken. When the clearIndex is incremented this causes\n the MemcachedCache to generate different cache-keys than it was before. This results in previously cached data being\n abandoned in the cache, and left for memcached to deal with.\n <p/>\n For these reasons it is not recommended to rely on clear() as a regular production functionality,\n it is very expensive and generally not very useful anyway.\n <p/>\n The MemcachedCache treats Hibernate cache regions as namespaces in Memcached. For more information see the\n <a href=\"http://www.socialtext.net/memcached/index.cgi?faq#namespaces\">memcached FAQ<\/a>.\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcachedCacheProvider_isMinimalPutsEnabledByDefault_388398797 \n According to the hibernate reference docs, MinimalPutsEnabledByDefault should be true for distributed caches.\n\n @return true\n     \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.MemcachedCache_clear_1729983874 \n Clear functionality is disabled by default.\n Read this class's javadoc for more detail.\n\n @throws CacheException\n @see com.googlecode.hibernate.memcached.MemcachedCache\n     \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.Sha1KeyStrategy \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.StringKeyStrategy \n Simply transforms the key object using String.valueOf()\n\n @deprecated As of 1.3 use the Sha1KeyStrategy instead\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.KeyStrategy \n Strategy interface for parsing the parts used by {@link MemcachedCache} to generate cache keys.\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.spymemcached.SpyMemcacheClientFactory \n Parses hibernate properties to produce a MemcachedClient.<br/>\n See {@link com.googlecode.hibernate.memcached.MemcachedCacheProvider} for property details.\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.utils.StringUtils \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.LoggingMemcacheExceptionHandler \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.spymemcached.SpyMemcache \n DOCUMENT ME!\n\n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.DigestKeyStrategy \n @author Ray Krueger\n \n
http://rdf.webofcode.org/woc/com.googlecode.hibernate.memcached.AbstractKeyStrategy \n KeyStrategy base class that handles concatenation, cleaning, and truncating the final cache key.\n <p/>\n Concatenates the three key components; regionName, clearIndex and key.<br/>\n Subclasses are responsible for transforming the Key object into something identifyable.\n\n @author Ray Krueger\n \n
